##\uD1B0\uCF13 \uAD00\uB828 \uC124\uC815 \uBC0F \uB370\uC774\uBCA0\uC774\uC2A4 \uAD00\uB828 \uC124\uC815
spring.application.name=board

##http://192.168.111.105:80
server.port=8000

##\uB85C\uADF8 \uCD9C\uB825 \uC124\uC815
logging.level.org.springframework=info
logging.level.org.mbc=debug

##\uB370\uC774\uD130\uBCA0\uC774\uC2A4 1,2\uB2E8\uACC4 \uC124\uC815
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/bootex
spring.datasource.username=bootuser
spring.datasource.password=bootuser

##jpa \uAD00\uB828 \uC124\uC815 \uCD94\uAC00(jpa : orm\uC5D0\uC11C \uC2DC\uC791\uB418\uC5C8\uB2E4.) \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB3C4 \uAC1D\uCCB4\uD615\uC73C\uB85C \uBCF4\uC790

## @Entity\uC640 \uAD00\uB828\uB41C \uCF54\uB4DC
spring.jpa.hibernate.ddl-auto=update
##update : \uAE30\uC874\uACFC \uB2E4\uB978 \uD14C\uC774\uBE14\uC774 \uBCC0\uACBD\uB418\uBA74 drop \uD6C4 create \uD55C\uB2E4.
##none : \uD14C\uC774\uBE14 \uAD6C\uC870\uB97C \uBCC0\uACBD\uD558\uC9C0 \uC54A\uB294\uB2E4.
##create : \uC2E4\uD589\uD560 \uB54C\uB9C8\uB2E4 \uD14C\uC774\uBE14\uC744 \uC0C8\uB85C \uB9CC\uB4E0\uB2E4.
##create-drop : \uC2E4\uD589\uD560 \uB54C \uD14C\uC774\uBE14\uC744 \uC0C8\uB85C \uB9CC\uB4E4\uACE0 \uC885\uB8CC\uD560 \uB54C drop
##validate : \uBCC0\uACBD\uB41C \uBD80\uBD84\uB9CC \uCF58\uC194\uB9CC \uC54C\uB824\uC90C(\uAD6C\uC870 \uBCC0\uACBD \uC548 \uD568)
spring.jpa.properties.hibernate.format_sql=true
##\uCF58\uC194\uC5D0 sql \uCFFC\uB9AC\uBB38\uC744 \uBCF4\uC5EC\uC90C
spring.jpa.show-sql=true
##jpa\uAC00 \uD558\uB294 \uC77C\uC744 \uBCF4\uC5EC\uC90C

##CREATE DATABASE `bootex` /*!40100 COLLATE 'utf8_general_ci' */;
#SHOW DATABASES;

##CREATE USER 'bootuser'@'%' IDENTIFIED BY 'bootuser';
#GRANT USAGE ON *.* TO 'bootuser'@'%';
#GRANT EXECUTE, SELECT, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON `bootex`.* TO 'bootuser'@'%' WITH GRANT OPTION;
#FLUSH PRIVILEGES;


## p597 \uCCA8\uBD80\uD30C\uC77C \uAD00\uB9AC\uC6A9 \uCF54\uB4DC \uCD94\uAC00
spring.servlet.multipart.enabled=true
## \uD30C\uC77C\uC5C5\uB85C\uB4DC\uC6A9 \uC11C\uBE14\uB9BF \uB3D9\uC791 \uD65C\uC131\uD654
## spring.servlet.multipart.location=//mbc//upload
spring.servlet.multipart.location=c:\\upload
## \uD30C\uC77C\uC800\uC7A5\uC704\uCE58 \uC9C0\uC815 (\uB9AC\uB205\uC2A4\uC5D0 \uBC30\uD3EC\uC2DC \uBCC0\uACBD\uD544\uC218)
spring.servlet.multipart.max-file-size=10MB
## \uC5C5\uB85C\uB4DC \uD30C\uC77C \uCD5C\uB300 \uC6A9\uB7C9
spring.servlet.multipart.max-request-size=30MB

org.mbc.upload.path=c:\\upload
## org.mbc.upload.path=//mbc//upload
## \uD328\uD0A4\uC9C0 \uBCC0\uACBD\uC2DC \uACBD\uB85C \uD655\uC778(\uC218\uC815\uD544\uC218)
## java\uC5D0\uC11C \uC0AC\uC6A9\uB420 \uACBD\uB85C


## 스프링 시큐리티 부분 추가 설정 (p681
logging.level.org.springframework.security=trace
## \uB85C\uADF8\uBD84\uC11D
## DisableEncodeUrlFilter(1/10)
# : 세션 ID가 URL에 포함되는 것을 막기 위해 HttpServletResponse를 사용해서 URL이 인코딩 되는 것을 막기 위한 필터이다

## WebAsyncManagerIntegrationFilter (2/10)
# : SpringSecurityContextHolder는 기본적으로 ThreadLocal 기반으로 동작하는데,
#비동기와 관련된 기능을 쓸 때에도 SecurityContext를 사용할 수 있도록 만들어주는 필터이다.

## SecurityContextHolderFilter (3/10)
# : SecurityContext가 없으면 만들어주는 필터이다.
#SecurityContext는 Authentication(인증) 객체를 보관하는 인터페이스이다.
#SecurityContext를 통해 한 요청에 대해서 어떤 필터에서도 같은 Authentication(인증) 객체를 사용할 수 있다.

## HeaderWriterFilter (4/10)
# : 응답헤더에 Security 와 관련된 헤더 값을 설정해주는 필터이다.

## CsrfFilter (5/10)
# : CSRF 공격을 방어하기 위한 설정을 하는 필터이다.
#   CSRF (Cross-Site Request Forgery, 크로스 사이트 요청 위조)는 웹 보안 취약점 중 하나로,
#   사용자가 자신의 의지와는 무관하게 공격자가 의도한 요청을 특정 웹사이트에 보내도록 유도하는 공격입니다.
#   즉, 공격자가 악성 코드를 심은 웹페이지나 이메일 등을 통해 사용자가 로그인된 상태에서 원하지 않는 작업을 수행하도록 속이는 것입니다.

## LogoutFilter (6/10)
#   로그아웃 요청을 처리하는 필터이다. 아래에  DefaultLogoutPageGeneratingFilter가 로그아웃 기본 페이지를 생성한다.
#   Did not match request to Ant [pattern='/logout', POST]

## Invoking RequestCacheAwareFilter (7/10)
## 인증 처리 후 원래의 Request 정보로 재구성하는 필터이다

## Invoking SecurityContextHolderAwareRequestFilter (8/10)
## : 서블릿 API 보안 메서드를 구현하는 요청 래퍼로 서블릿한 요청을 채우는 필터이다.

## AnonymousAuthenticationFilter (9/10)
## : 이 필터에 올 때까지 사용자가 인증되지 않았다면, 이 요청은 익명의 사용자가 보낸 것으로 판단할 수 있다.
##  이 익명 사용자에 관한 처리를 하는 필터이다.

## ExceptionTranslationFilter (10/10)
## : 필터처리 과정에서 인증 예외 또는 인가 예외가 발생한 경우 해당 예외를 잡아서 처리하는 필터이다.